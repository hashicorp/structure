///-------------------------------------------------------------------------///
/// WARNING: Private Sass module (definitions may change at ANY time)
///-------------------------------------------------------------------------///

// tooltip is actually an ember modifier but the tooltip SASS files are organized under pds/components/tooltip
// I don't know how to create a modifiers directory so that these styles go into pds/modifiers - similar to how helpers are set-up

$_module: "PDS.Components.Tooltip";
/* --- [debug] CONFIG: #{$_module} --- */
@use "sass:map";
@use "../../theme";
@use "../../tokens/color";
@use "../../tokens/font";
@use "../../tokens/scale";
@use "../_config";


.tippy-box[data-theme~='structure'] {
  $tooltip-width: 192px;
  $arrow-border-size: 7.5px;
  $arrow-width: calc(#{$arrow-border-size} * 2); //15 pixels
  $arrow-height: calc(#{$arrow-border-size} * 1.07); //8 pixels
  $arrow-y-axis-distance: calc(0px - #{$arrow-border-size});

  background-color: color.$ui-gray-700;
  color: color.$white;
  font-size: scale.$sm--1;
  padding: scale.$sm--1;
  border-radius: scale.$sm--4;
  box-shadow: theme.$boxShadow--low;
  transition-property: transform, visibility, opacity;

  &[data-animation='fade'][data-state='hidden'] {
    opacity: 0;
  }
  &[data-inertia][data-state='visible'] {
    transition-timing-function: cubic-bezier(0.54, 1.5, 0.38, 1.11);
  }

  .tippy-content { 
    max-width: $tooltip-width; //putting the max-width here because tippy generates a javascript max-width on .tippy-box
    position: relative;
    z-index: 1;
  }

  .tippy-arrow {
    color: color.$ui-gray-700;
    width: $arrow-width;
    height: $arrow-height; 

    &::before {
      content: '';
      position: absolute;
      border-color: transparent;
      border-style: solid;
    }
  }

  /*** 
  Because we are customizing the arrow size in our theme, 
  we need to customize the positioning of the .tippy-arrow for each placement option
  **/
  
  // placement option: top
  &[data-placement^='top'] > .tippy-arrow {
    bottom: 0;

    &::before {
      bottom: $arrow-y-axis-distance;
      transform-origin: center top;
      border-width: $arrow-border-size $arrow-border-size 0;
      border-top-color: initial;
    }
  }

  // placement option: bottom
  &[data-placement^='bottom'] > .tippy-arrow {
    top: 0;

    &::before {
      left: 0;
      top: $arrow-y-axis-distance;
      transform-origin: center bottom;
      border-width: 0 $arrow-border-size $arrow-border-size;
      border-bottom-color: initial;
    }
  }

  // placement options: left, left-end, left-start
  &[data-placement^='left'] > .tippy-arrow,
  &[data-placement^='left-start'] > .tippy-arrow,
  &[data-placement^='left-end'] > .tippy-arrow {
    right: 0;

    &::before {
      right: $arrow-y-axis-distance;
      transform-origin: center left;
      border-width: $arrow-border-size 0 $arrow-border-size $arrow-border-size;
      border-left-color: initial;
    }
  }

  &[data-placement^='left-end'] > .tippy-arrow {
    &::before {
      top: $arrow-y-axis-distance;
    }
  }

  // placement options: right, right-start, right-end
  &[data-placement^='right'] > .tippy-arrow,
  &[data-placement^='right-start'] > .tippy-arrow,
  &[data-placement^='right-end'] > .tippy-arrow {
    left: 0;

    &::before {
      left: $arrow-y-axis-distance;
      transform-origin: center right;
      border-width: $arrow-border-size $arrow-border-size $arrow-border-size 0;
      border-right-color: initial;

    }
  }
  
  &[data-placement^='right-end'] > .tippy-arrow {
    &::before {
      top: $arrow-y-axis-distance;
    }
  }
}